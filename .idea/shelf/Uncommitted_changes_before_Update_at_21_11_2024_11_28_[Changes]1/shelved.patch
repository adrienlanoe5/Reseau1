Index: perceptron.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from math import exp\r\nimport numpy as np\r\n\r\nliste_images=[]\r\n\r\nclass perceptron:\r\n    def __init__(self):\r\n        self.biais=1\r\n        self.label= 0 # importé avec l'image\r\n        self.n=0.03 #taux d'apprentissage\r\n        self.poids=list(np.random.uniform(0,1,28**2))\r\n        self.observations=[]\r\n\r\n\r\n    def deroulement(self, image):\r\n        self.observations = image\r\n        sum=self.attribution_poids()\r\n        resultat=self.fonction_activation(sum)\r\n        erreur=self.erreur(resultat)\r\n        self.maj_poids(erreur)\r\n\r\n    def fonction_activation(self, sum):\r\n        if sum<0.5:\r\n            return 0\r\n        else:\r\n            return 1\r\n\r\n    def erreur(self,resultat):\r\n        if self.label!=resultat :\r\n            erreur=self.n(self.label-resultat)\r\n            return erreur\r\n        else :\r\n            return 0\r\n\r\n    def attribution_poids(self):\r\n        sum=0\r\n        for i in range(len(self.observations)):\r\n            sum+= self.poids[i]*self.observations[i]\r\n        return sum\r\n\r\n    def maj_poids(self,erreur):\r\n        for i in range(len(self.poids)):\r\n            new_poids=self.poids[i]+self.n*erreur*self.observations[i]\r\n            self.poids[i]=new_poids\r\n\r\nNeurone=perceptron()\r\nfor image in liste_images:\r\n    Neurone.deroulement(image)\r\n#Neurone.deroulement()\r\n\r\n\r\n#\r\n# MNIST Dataset\r\n\r\nimport struct\r\nfrom array import array\r\nfrom os.path import join\r\n\r\n\r\n#\r\n# MNIST Data Loader Class\r\n#\r\nclass MnistDataloader(object):\r\n    def __init__(self, training_images_filepath, training_labels_filepath,\r\n                 test_images_filepath, test_labels_filepath):\r\n        self.training_images_filepath = training_images_filepath\r\n        self.training_labels_filepath = training_labels_filepath\r\n        self.test_images_filepath = test_images_filepath\r\n        self.test_labels_filepath = test_labels_filepath\r\n\r\n    def read_images_labels(self, images_filepath, labels_filepath):\r\n        labels = []\r\n        with open(labels_filepath, 'rb') as file:\r\n            magic, size = struct.unpack(\">II\", file.read(8))\r\n            if magic != 2049:\r\n                raise ValueError('Magic number mismatch, expected 2049, got {}'.format(magic))\r\n            labels = array(\"B\", file.read())\r\n\r\n        with open(images_filepath, 'rb') as file:\r\n            magic, size, rows, cols = struct.unpack(\">IIII\", file.read(16))\r\n            if magic != 2051:\r\n                raise ValueError('Magic number mismatch, expected 2051, got {}'.format(magic))\r\n            image_data = array(\"B\", file.read())\r\n        images = []\r\n        for i in range(size):\r\n            images.append([0] * rows * cols)\r\n        for i in range(size):\r\n            img = np.array(image_data[i * rows * cols:(i + 1) * rows * cols])\r\n            img = img.reshape(28, 28)\r\n            images[i][:] = img\r\n\r\n        return images, labels\r\n\r\n    def load_data(self):\r\n        x_train, y_train = self.read_images_labels(self.training_images_filepath, self.training_labels_filepath)\r\n        x_test, y_test = self.read_images_labels(self.test_images_filepath, self.test_labels_filepath)\r\n        return (x_train, y_train), (x_test, y_test)\r\n    #\r\n\r\n# Verify Reading Dataset via MnistDataloader class\r\n#\r\n\r\nimport random\r\nimport matplotlib.pyplot as plt\r\n\r\n#\r\n# Set file paths based on added MNIST Datasets\r\n\r\ninput_path = r\"C:\\Users\\adrie\\PycharmProjects\\TP programmation avancée\\Reseau1\\Reseaudeneurones\\archive\"\r\ntraining_images_filepath = join(input_path, 'train-images-idx3-ubyte/train-images-idx3-ubyte')\r\ntraining_labels_filepath = join(input_path, 'train-labels-idx1-ubyte/train-labels-idx1-ubyte')\r\ntest_images_filepath = join(input_path, 't10k-images-idx3-ubyte/t10k-images-idx3-ubyte')\r\ntest_labels_filepath = join(input_path, 't10k-labels-idx1-ubyte/t10k-labels-idx1-ubyte')\r\n\r\n\r\n#\r\n# Helper function to show a list of images with their relating titles\r\n#\r\ndef show_images(images, title_texts):\r\n    cols = 5\r\n    rows = int(len(images) / cols) + 1\r\n    plt.figure(figsize=(30, 20))\r\n    index = 1\r\n    for x in zip(images, title_texts):\r\n        image = x[0]\r\n        title_text = x[1]\r\n        plt.subplot(rows, cols, index)\r\n        plt.imshow(image, cmap=plt.cm.gray)\r\n        if (title_text != ''):\r\n            plt.title(title_text, fontsize=15);\r\n        index += 1\r\n\r\n\r\n#\r\n# Load MINST dataset\r\n#\r\nmnist_dataloader = MnistDataloader(training_images_filepath, training_labels_filepath, test_images_filepath,\r\n                                   test_labels_filepath)\r\n(x_train, y_train), (x_test, y_test) = mnist_dataloader.load_data()\r\n\r\nprint(x_train[0])\r\nprint(y_train[0])\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/perceptron.py b/perceptron.py
--- a/perceptron.py	(revision e54acbdb35a1d9691d0d2ab9c5d6d9ecc25ba196)
+++ b/perceptron.py	(date 1732184814047)
@@ -106,7 +106,7 @@
 #
 # Set file paths based on added MNIST Datasets
 
-input_path = r"C:\Users\adrie\PycharmProjects\TP programmation avancée\Reseau1\Reseaudeneurones\archive"
+input_path = r"D:\L3\cours\projet info 1\Reseau1"
 training_images_filepath = join(input_path, 'train-images-idx3-ubyte/train-images-idx3-ubyte')
 training_labels_filepath = join(input_path, 'train-labels-idx1-ubyte/train-labels-idx1-ubyte')
 test_images_filepath = join(input_path, 't10k-images-idx3-ubyte/t10k-images-idx3-ubyte')
